# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_s_gd2')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_s_gd2')
    _s_gd2 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_s_gd2', [dirname(__file__)])
        except ImportError:
            import _s_gd2
            return _s_gd2
        try:
            _mod = imp.load_module('_s_gd2', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _s_gd2 = swig_import_helper()
    del swig_import_helper
else:
    import _s_gd2
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def sgd_direct(*args):
    return _s_gd2.sgd_direct(*args)
sgd_direct = _s_gd2.sgd_direct

def sgd_direct_horizontal(*args):
    return _s_gd2.sgd_direct_horizontal(*args)
sgd_direct_horizontal = _s_gd2.sgd_direct_horizontal
# This file is compatible with both classic and new-style classes.


############################
# NON-SWIG FUNCTIONS BELOW #
############################

from scipy.sparse import find
from scipy.sparse.csgraph import shortest_path, connected_components
from scipy.spatial.distance import squareform
import numpy as np

def reduce_stress_direct(X, d, w, eta):
    """takes a n-by-2 matrix X, nC2 vectors d and w, and a vector of step sizes eta
    and performs stochastic gradient descent using c++ bindings generated by SWIG"""
    sgd_direct(X, d, w, eta)

def layout_scipy(S, weighted=False, t_max=15, mu_min=.1):
    """takes a scipy sparse matrix S with n vertices
    and returns a n-by-2 matrix of positions X with minimized stress"""

    n_components, labels = connected_components(S)
    if n_components > 1:
        raise Exception("graph has more than one connected component")

    n,_ = S.shape
    # calculate shortest paths and weights
    d = shortest_path(S, directed=False, unweighted=not weighted)
    d = squareform(d)
    w = 1/d**2

    # prepare annealing schedule
    eta_max = 1/min(w)
    eta_min = mu_min/max(w)
    lambd = np.log(eta_min/eta_max) / (t_max-1)

    eta = np.arange(t_max)
    eta = eta_max * np.exp(lambd*eta)

    # initialize positions
    X = np.random.rand(n, 2)

    # perform SGD
    sgd_direct(X, d, w, eta)
    return X

def layout_scipy_y_constrained(S, Y, weighted=False, t_max=15, mu_min=.1):
    """takes a scipy sparse matrix S with n vertices
    and returns a n-by-2 matrix of positions X with minimized stress
    with y-axis positions constrained to the values in Y"""

    n_components, labels = connected_components(S)
    if n_components > 1:
        raise Exception("graph has more than one connected component")

    n,_ = S.shape
    # calculate shortest paths and weights
    d = shortest_path(S, directed=False, unweighted=not weighted)
    d = squareform(d)
    w = 1/d**2

    # prepare annealing schedule
    eta_max = 1/min(w)
    eta_min = mu_min/max(w)
    lambd = np.log(eta_min/eta_max) / (t_max-1)

    eta = np.arange(t_max)
    eta = eta_max * np.exp(lambd*eta)

    # initialize positions
    X = np.random.rand(n, 2)
    # constrain y axis positions
    for i in range(n):
        X[i,1] = Y[i];

    # perform SGD
    sgd_direct_horizontal(X, d, w, eta)
    return X

